#ifndef OPERATOR_HANDLER_SEMANTIC_H
#define OPERATOR_HANDLER_SEMANTIC_H

#include "operator_handler.h"

// -----------------------------------------------------------------------------
// 函数: find_semantic_operator_handler
// 作用: 根据操作符类型 (type) 查找对应的语义处理函数。
//       在语义分析阶段，每种操作符（如 +, -, *, /, =, == 等）
//       都需要有相应的处理逻辑来检查类型兼容性、返回值类型、
//       或生成中间表达式节点等。
// 参数:
//   type - 操作符类型常量（通常是枚举值，例如 OP_ADD, OP_SUB 等）
// 返回:
//   operator_handler_pt 类型的函数指针，用于处理该操作符的语义。
//   若找不到对应处理函数，则返回 NULL。
// -----------------------------------------------------------------------------
operator_handler_pt find_semantic_operator_handler(const int type);



// -----------------------------------------------------------------------------
// 函数: function_semantic_analysis
// 作用: 对函数节点 (function_t) 进行语义分析。
//       通常包括：
//         - 检查函数声明与定义是否匹配
//         - 检查形参与实参类型一致性
//         - 检查函数返回类型是否合法
//         - 检查局部变量的作用域与重复定义
// 参数:
//   ast - 整个语法树对象指针，用于访问全局符号表或类型系统
//   f   - 要分析的函数节点 (function_t*)
// 返回:
//   0 表示分析成功；负值表示发现语义错误（如类型不匹配、未定义符号等）
// -----------------------------------------------------------------------------
int function_semantic_analysis(ast_t *ast, function_t *f);



// -----------------------------------------------------------------------------
// 函数: expr_semantic_analysis
// 作用: 对表达式节点 (expr_t) 进行语义分析。
//       主要任务包括：
//         - 递归分析表达式子树
//         - 检查操作数类型是否兼容（例如 int + float）
//         - 检查函数调用的参数类型与声明是否匹配
//         - 推导表达式的结果类型（type inference）
//         - 绑定变量引用（variable reference）到定义的符号
// 参数:
//   ast - 整个语法树对象，用于访问符号表、类型系统等全局信息
//   e   - 表达式节点 (expr_t*)，通常来自函数体或语句
// 返回:
//   0 表示分析成功；负值表示发现语义错误（例如类型错误、不合法的操作符）
// -----------------------------------------------------------------------------
int expr_semantic_analysis(ast_t *ast, expr_t *e);




// -----------------------------------------------------------------------------
// 函数: semantic_analysis
// 作用: 执行整个程序（抽象语法树 ast）的语义分析。
//       这是语义阶段的总入口函数，通常执行以下步骤：
//         1. 遍历 AST 的所有节点；
//         2. 对函数、变量、表达式等节点分别调用相应的语义检查函数；
//         3. 检查全局符号表一致性（如重复定义、未定义引用）；
//         4. 检查类型系统（如类型不匹配、隐式转换等）。
// 参数:
//   ast - 抽象语法树根节点指针 (ast_t*)，包含整个源文件或模块的结构。
// 返回:
//   0 表示语义检查通过；
//   负值表示存在语义错误，可能需要记录错误信息供后续阶段使用。
// -----------------------------------------------------------------------------
int semantic_analysis(ast_t *ast);

#endif
