/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: eda.proto */

#ifndef PROTOBUF_C_5feda_2eproto__INCLUDED
#define PROTOBUF_C_5feda_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _ScfLine ScfLine;
typedef struct _ScfEpin ScfEpin;
typedef struct _ScfEconn ScfEconn;
typedef struct _ScfEline ScfEline;
typedef struct _ScfEcomponent ScfEcomponent;
typedef struct _ScfEfunction ScfEfunction;
typedef struct _ScfEboard ScfEboard;


/* --- enums --- */


/* --- messages --- */

struct  _ScfLine
{
  ProtobufCMessage base;
  int32_t x0;
  int32_t y0;
  int32_t x1;
  int32_t y1;
};
#define LINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&line__descriptor) \
    , 0, 0, 0, 0 }


struct  _ScfEpin
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t cid;
  uint64_t lid;
  uint64_t flags;
  size_t n_tos;
  uint64_t *tos;
  uint64_t c_lid;
  double v;
  double jv;
  double a;
  double ja;
  double r;
  double jr;
  double uf;
  double uh;
  double hfe;
  double dr;
  double jdr;
  double sr;
  double jsr;
  double pr;
  double jpr;
  uint64_t path;
  int32_t x;
  int32_t y;
  int32_t n_diodes;
  int32_t l_pos;
  protobuf_c_boolean vflag;
  protobuf_c_boolean pflag;
  protobuf_c_boolean vconst;
  protobuf_c_boolean aconst;
};
#define EPIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&epin__descriptor) \
    , 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ScfEconn
{
  ProtobufCMessage base;
  uint64_t lid;
  size_t n_cids;
  uint64_t *cids;
};
#define ECONN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&econn__descriptor) \
    , 0, 0,NULL }


struct  _ScfEline
{
  ProtobufCMessage base;
  uint64_t id;
  size_t n_pins;
  uint64_t *pins;
  uint64_t c_pins;
  uint64_t flags;
  int64_t color;
  size_t n_conns;
  ScfEconn **conns;
  size_t n_lines;
  ScfLine **lines;
  double v;
  double jv;
  double a;
  double ja;
  protobuf_c_boolean vconst;
  protobuf_c_boolean aconst;
  protobuf_c_boolean vflag;
};
#define ELINE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eline__descriptor) \
    , 0, 0,NULL, 0, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0 }


struct  _ScfEcomponent
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t type;
  uint64_t model;
  size_t n_pins;
  ScfEpin **pins;
  double v;
  double jv;
  double a;
  double ja;
  double r;
  double jr;
  double uf;
  double uh;
  int64_t color;
  int32_t status;
  int32_t x;
  int32_t y;
  int32_t w;
  int32_t h;
  protobuf_c_boolean vflag;
  protobuf_c_boolean lock;
};
#define ECOMPONENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ecomponent__descriptor) \
    , 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _ScfEfunction
{
  ProtobufCMessage base;
  char *name;
  size_t n_components;
  ScfEcomponent **components;
  size_t n_elines;
  ScfEline **elines;
  int32_t x;
  int32_t y;
  int32_t w;
  int32_t h;
};
#define EFUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&efunction__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0, 0, 0, 0 }


struct  _ScfEboard
{
  ProtobufCMessage base;
  size_t n_functions;
  ScfEfunction **functions;
};
#define EBOARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eboard__descriptor) \
    , 0,NULL }


/* ScfLine methods */
void   line__init
                     (ScfLine         *message);
size_t line__get_packed_size
                     (const ScfLine   *message);
size_t line__pack
                     (const ScfLine   *message,
                      uint8_t             *out);
size_t line__pack_to_buffer
                     (const ScfLine   *message,
                      ProtobufCBuffer     *buffer);
ScfLine *
       line__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   line__free_unpacked
                     (ScfLine *message,
                      ProtobufCAllocator *allocator);
/* ScfEpin methods */
void   epin__init
                     (ScfEpin         *message);
size_t epin__get_packed_size
                     (const ScfEpin   *message);
size_t epin__pack
                     (const ScfEpin   *message,
                      uint8_t             *out);
size_t epin__pack_to_buffer
                     (const ScfEpin   *message,
                      ProtobufCBuffer     *buffer);
ScfEpin *
       epin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   epin__free_unpacked
                     (ScfEpin *message,
                      ProtobufCAllocator *allocator);
/* ScfEconn methods */
void   econn__init
                     (ScfEconn         *message);
size_t econn__get_packed_size
                     (const ScfEconn   *message);
size_t econn__pack
                     (const ScfEconn   *message,
                      uint8_t             *out);
size_t econn__pack_to_buffer
                     (const ScfEconn   *message,
                      ProtobufCBuffer     *buffer);
ScfEconn *
       econn__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   econn__free_unpacked
                     (ScfEconn *message,
                      ProtobufCAllocator *allocator);
/* ScfEline methods */
void   eline__init
                     (ScfEline         *message);
size_t eline__get_packed_size
                     (const ScfEline   *message);
size_t eline__pack
                     (const ScfEline   *message,
                      uint8_t             *out);
size_t eline__pack_to_buffer
                     (const ScfEline   *message,
                      ProtobufCBuffer     *buffer);
ScfEline *
       eline__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eline__free_unpacked
                     (ScfEline *message,
                      ProtobufCAllocator *allocator);
/* ScfEcomponent methods */
void   ecomponent__init
                     (ScfEcomponent         *message);
size_t ecomponent__get_packed_size
                     (const ScfEcomponent   *message);
size_t ecomponent__pack
                     (const ScfEcomponent   *message,
                      uint8_t             *out);
size_t ecomponent__pack_to_buffer
                     (const ScfEcomponent   *message,
                      ProtobufCBuffer     *buffer);
ScfEcomponent *
       ecomponent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ecomponent__free_unpacked
                     (ScfEcomponent *message,
                      ProtobufCAllocator *allocator);
/* ScfEfunction methods */
void   efunction__init
                     (ScfEfunction         *message);
size_t efunction__get_packed_size
                     (const ScfEfunction   *message);
size_t efunction__pack
                     (const ScfEfunction   *message,
                      uint8_t             *out);
size_t efunction__pack_to_buffer
                     (const ScfEfunction   *message,
                      ProtobufCBuffer     *buffer);
ScfEfunction *
       efunction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   efunction__free_unpacked
                     (ScfEfunction *message,
                      ProtobufCAllocator *allocator);
/* ScfEboard methods */
void   eboard__init
                     (ScfEboard         *message);
size_t eboard__get_packed_size
                     (const ScfEboard   *message);
size_t eboard__pack
                     (const ScfEboard   *message,
                      uint8_t             *out);
size_t eboard__pack_to_buffer
                     (const ScfEboard   *message,
                      ProtobufCBuffer     *buffer);
ScfEboard *
       eboard__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eboard__free_unpacked
                     (ScfEboard *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ScfLine_Closure)
                 (const ScfLine *message,
                  void *closure_data);
typedef void (*ScfEpin_Closure)
                 (const ScfEpin *message,
                  void *closure_data);
typedef void (*ScfEconn_Closure)
                 (const ScfEconn *message,
                  void *closure_data);
typedef void (*ScfEline_Closure)
                 (const ScfEline *message,
                  void *closure_data);
typedef void (*ScfEcomponent_Closure)
                 (const ScfEcomponent *message,
                  void *closure_data);
typedef void (*ScfEfunction_Closure)
                 (const ScfEfunction *message,
                  void *closure_data);
typedef void (*ScfEboard_Closure)
                 (const ScfEboard *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor line__descriptor;
extern const ProtobufCMessageDescriptor epin__descriptor;
extern const ProtobufCMessageDescriptor econn__descriptor;
extern const ProtobufCMessageDescriptor eline__descriptor;
extern const ProtobufCMessageDescriptor ecomponent__descriptor;
extern const ProtobufCMessageDescriptor efunction__descriptor;
extern const ProtobufCMessageDescriptor eboard__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_5feda_2eproto__INCLUDED */
